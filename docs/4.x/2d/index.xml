<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2D on Godot 4 Recipes</title><link>https://godotrecipes.com/godot_recipes/4.x/2d/index.html</link><description>Recent content in 2D on Godot 4 Recipes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://godotrecipes.com/godot_recipes/4.x/2d/index.xml" rel="self" type="application/rss+xml"/><item><title>Entering/Exiting the screen</title><link>https://godotrecipes.com/godot_recipes/4.x/2d/enter_exit_screen/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/2d/enter_exit_screen/index.html</guid><description>Problem You want to detect when an object enters or exits the screen.
Solution The engine provides a node for this: VisibleOnScreenNotifier2D. Attach this node to your object, and you&amp;rsquo;ll be able to use its screen_entered and screen_exited signals. *
Example 1 Consider a projectile that travels in a straight line after it&amp;rsquo;s fired. If we continue firing, eventually we&amp;rsquo;ll have a large number of objects for the engine to track, event though they&amp;rsquo;re offscreen, which can cause lag.</description></item><item><title>Platform character</title><link>https://godotrecipes.com/godot_recipes/4.x/2d/platform_character/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/2d/platform_character/index.html</guid><description>Problem You need to make a 2D platform-style character.
Solution New developers are often surprised at how complex a platform character can be to program. Godot provides some built-in tools to assist, but there are as many solutions as there are games. In this tutorial, we won&amp;rsquo;t be going in-depth with features like double-jumps, crouching, wall-jumps, or animation. Here we&amp;rsquo;ll discuss the fundamentals of platformer movement. See the rest of the recipes for other solutions.</description></item><item><title>Screen wrap</title><link>https://godotrecipes.com/godot_recipes/4.x/2d/screen_wrap/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/2d/screen_wrap/index.html</guid><description>Problem You want to allow the player to &amp;ldquo;wrap around&amp;rdquo; the screen, teleporting from one side of the screen to the other. This is a common feature, especially in old-school 2D games (think Pac-man).
Solution Get your screen (viewport) size
@onready var screen_size = get_viewport_rect().size get_viewport_rect() is available to any CanvasItem derived node.
Compare your player&amp;rsquo;s position
if position.x &amp;gt; screen_size.x: position.x = 0 if position.x &amp;lt; 0: position.x = screen_size.</description></item><item><title>Top-down movement</title><link>https://godotrecipes.com/godot_recipes/4.x/2d/topdown_movement/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/2d/topdown_movement/index.html</guid><description>Problem You&amp;rsquo;re making a 2D top-down game, and you want to control a character&amp;rsquo;s movement.
Solution For this solution, we&amp;rsquo;ll assume you have the following input actions defined:
Action Name Key(s) &amp;quot;up&amp;quot; W,↑ &amp;quot;down&amp;quot; S,↓ &amp;quot;right&amp;quot; D,→ &amp;quot;left&amp;quot; A,← &amp;quot;click&amp;quot; Mouse button 1 We will also assume you&amp;rsquo;re using a CharacterBody2D node.
We can solve this problem in many ways, depending on what type of behavior you&amp;rsquo;re looking for.
Option 1: 8-way movement In this scenario, the player uses the four directional keys to move (including diagonals).</description></item><item><title>Grid-based movement</title><link>https://godotrecipes.com/godot_recipes/4.x/2d/grid_movement/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/2d/grid_movement/index.html</guid><description>Problem You need a 2D character that moves in a grid pattern.
Solution Grid- or tile-based movement means the character&amp;rsquo;s position is restricted. They can only stand on a particular tile - never between two tiles.
Character setup Here are the nodes we&amp;rsquo;ll use for the player:
Area2D (&amp;ldquo;Player&amp;rdquo;): Using an Area2D means we can detect overlap (for picking up objects or colliding with enemies). Sprite2D: You can use a sprite sheet here (we&amp;rsquo;ll set up the animation below).</description></item><item><title>Shooting projectiles</title><link>https://godotrecipes.com/godot_recipes/4.x/2d/2d_shooting/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/2d/2d_shooting/index.html</guid><description>Problem You want to shoot projectiles from your player/mob/etc..
Solution Setting up the bullet First, we&amp;rsquo;ll set up a &amp;ldquo;bullet&amp;rdquo; object that we can instance. Here are the nodes we&amp;rsquo;ll use:
Area2D: Bullet Sprite2D CollisionShape2D For the Sprite2D&amp;rsquo;s texture, you can use any image you like. Here&amp;rsquo;s an example one:
Set up the nodes and configure the sprite and collision shape. If your texture is oriented pointing up, like the one above, make sure to rotate the Sprite node by 90° so that it&amp;rsquo;s pointing to the right, ensuring it matches the parent’s “forward” direction.</description></item><item><title>Car steering</title><link>https://godotrecipes.com/godot_recipes/4.x/2d/car_steering/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/2d/car_steering/index.html</guid><description>Problem You need to create a 2D top-down car controller.
Solution When approaching this problem, beginners often wind up creating something that handles nothing like a real car. Some common mistakes you&amp;rsquo;ll find in amateur car games:
A car doesn&amp;rsquo;t rotate around its center. Put another way, a car&amp;rsquo;s rear wheels don&amp;rsquo;t slide side-to-side. (Unless it&amp;rsquo;s drifting, but we&amp;rsquo;ll talk about that later.) A car can only turn when it&amp;rsquo;s moving - it can&amp;rsquo;t spin in place.</description></item><item><title>8-Directional Movement/Animation</title><link>https://godotrecipes.com/godot_recipes/4.x/2d/8_direction/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/2d/8_direction/index.html</guid><description>Problem You need a 2D character that has 8-directional movement, including animation.
Solution For our example, we&amp;rsquo;ll use the Isometric Mini-Crusader, which contains 8-directional animations for idle, run, attack, and several other states.
The animations are organized in folders, with a separate image for each frame. We&amp;rsquo;ll use an AnimatedSprite2D and we&amp;rsquo;ll name each animation based on its direction. For example, idle0 pointing to the right and going clockwise to idle7.</description></item><item><title>Using Y-Sort</title><link>https://godotrecipes.com/godot_recipes/4.x/2d/using_ysort/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/2d/using_ysort/index.html</guid><description>Problem Many 2D games use a &amp;ldquo;3/4 view&amp;rdquo; perspective, giving the impression that the camera is looking at the world at an angle. To make this work, objects that are &amp;ldquo;farther&amp;rdquo; away need to be rendered behind &amp;ldquo;nearer&amp;rdquo; objects. In practice, that means we want to &amp;ldquo;y-sort&amp;rdquo; - making the drawing order tied to the object&amp;rsquo;s y coordinate. The higher on the screen, the farther away and therefore lower the render order.</description></item><item><title>Coyote Time</title><link>https://godotrecipes.com/godot_recipes/4.x/2d/coyote_time/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/2d/coyote_time/index.html</guid><description>Problem Your platformer jumping feels &amp;ldquo;off&amp;rdquo;. Players don&amp;rsquo;t have good control and sometimes they &amp;ldquo;miss&amp;rdquo; jumping off the edge of platforms.
Solution The answer to this problem is to use a technique called &amp;ldquo;coyote time&amp;rdquo;. This gives the player a greater feeling of control and a little &amp;ldquo;wiggle room&amp;rdquo; around the process of jumping from the edges of platforms.
&amp;ldquo;Coyote time&amp;rdquo; works like this:
If the player walks off the edge of a platform, for a few frames afterward, we still allow them to jump as if they were still on the ground.</description></item><item><title>Moving Platforms</title><link>https://godotrecipes.com/godot_recipes/4.x/2d/moving_platforms/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/2d/moving_platforms/index.html</guid><description>Problem You need moving platforms in your 2D platformer.
Solution There are several ways to approach this problem. In this recipe, we&amp;rsquo;ll use AnimatableBody2Ds for our platform and move it with a Tween. This allows for a variety of movement styles while minimizing the amount of code we need to write.
Info You can also implement this moving platform technique using an AnimationPlayer rather than a tween. Much of the setup will be the same, but rather than tween code, you&amp;rsquo;ll animate the body&amp;rsquo;s position property.</description></item><item><title>Pathfinding on a 2D Grid</title><link>https://godotrecipes.com/godot_recipes/4.x/2d/grid_pathfinding/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/2d/grid_pathfinding/index.html</guid><description>Problem You have a grid-based environment and you&amp;rsquo;d like to set up pathfinding to allow navigation.
Solution Godot provides a number of methods for pathfinding. For this recipe, we&amp;rsquo;ll consider the A* algorithm.
About A* A* is a widely-used algorithm for finding the shortest path between two points. It can be used in any graph-based data structure, not just a grid.
AStarGrid2D is a specialized version of Godot&amp;rsquo;s more generic AStar2D class.</description></item><item><title>Multitarget Camera</title><link>https://godotrecipes.com/godot_recipes/4.x/2d/multi_target_camera/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/2d/multi_target_camera/index.html</guid><description>Problem You need a dynamic camera that moves and zooms to keep multiple objects on screen at the same time.
An example might be in a 2 player game, keeping both players on-screen as they move farther and closer together, like so:
Solution In a single-player game, you&amp;rsquo;re probably used to attaching the camera to the player, so that it automatically follows them. We can&amp;rsquo;t really do this here because we have 2 (or more) players or other game objects that we want to keep on the screen at all times.</description></item><item><title>Line2D Collision</title><link>https://godotrecipes.com/godot_recipes/4.x/2d/line_collision/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/2d/line_collision/index.html</guid><description>Problem You want to have collisions with a Line2D.
Solution Node setup Add the following nodes to your scene, and draw your line as desired:
Line2D StaticBody2D Don&amp;rsquo;t add a collision shape to the body yet!
Note You can use an Area2D instead if you want to detect overlap with the line rather than collision.
Next, we need to add collision shapes to the body. We have two options:
Option 1: Using SegmentShape2D SegmentShape2D is a line-segment collision shape.</description></item></channel></rss>