<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>UI on Godot 4 Recipes</title><link>https://godotrecipes.com/godot_recipes/4.x/ui/index.html</link><description>Recent content in UI on Godot 4 Recipes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://godotrecipes.com/godot_recipes/4.x/ui/index.xml" rel="self" type="application/rss+xml"/><item><title>Heart Containers: 3 Ways</title><link>https://godotrecipes.com/godot_recipes/4.x/ui/heart_containers_3/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/ui/heart_containers_3/index.html</guid><description>Problem You need to display a heart container bar (or other icon-based bar).
Solution A common way of displaying the player&amp;rsquo;s health is via a series of icons (typically hearts) that disappear as the player takes damage.
In this recipe, we&amp;rsquo;re going to explore three ways of displaying this information, which I&amp;rsquo;m labeling &amp;ldquo;simple&amp;rdquo;, &amp;ldquo;empty&amp;rdquo;, and &amp;ldquo;partial&amp;rdquo;:
This image shows what the bar displays when the player has 3 health.</description></item><item><title>Floating combat text</title><link>https://godotrecipes.com/godot_recipes/4.x/ui/floating_text/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/ui/floating_text/index.html</guid><description>Problem You want units to display damage as floating numbers when hit.
Solution There are many ways to approach this problem. For example, you could use a bitmap font and build an image for each number out of its digits, then use a Sprite2D node to display and move it.
However, for this recipe, we&amp;rsquo;ll use a Label node (named &amp;ldquo;FCT&amp;rdquo;). This will give us the flexibility to change the font, as well as making it easy to display the number as a string - or even other messages such as &amp;ldquo;miss&amp;rdquo;.</description></item><item><title>Level Select Menu</title><link>https://godotrecipes.com/godot_recipes/4.x/ui/level_select/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/ui/level_select/index.html</guid><description>Problem Your game needs a &amp;ldquo;level select&amp;rdquo; menu, where the user can choose from a grid of options.
Solution As shown in the example above, we&amp;rsquo;ll make a scrolling grid of level &amp;ldquo;boxes&amp;rdquo; that the player can choose from. Let&amp;rsquo;s start with the individual level boxes:
1: Level box Here&amp;rsquo;s the node setup:
LevelBox: PanelContainer Label MarginContainer TextureRect The TextureRect is for displaying the lock icon, and the Label for displaying the level number.</description></item><item><title>Minimap/radar</title><link>https://godotrecipes.com/godot_recipes/4.x/ui/minimap/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/ui/minimap/index.html</guid><description>Problem You want a minimap or radar-style UI item showing the locations of objects outside of the player&amp;rsquo;s view.
Solution Here&amp;rsquo;s an example of what we are going for: Project setup To illustrate this feature, we&amp;rsquo;ll start with a simplified top-down game using the Autotile recipe and a player based on the Top-down character recipe. See the linked recipes for details on how these parts work.
Note The art in this project comes from kenney.</description></item></channel></rss>