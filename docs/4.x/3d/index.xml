<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>3D on Godot 4 Recipes</title><link>https://godotrecipes.com/godot_recipes/4.x/3d/index.html</link><description>Recent content in 3D on Godot 4 Recipes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://godotrecipes.com/godot_recipes/4.x/3d/index.xml" rel="self" type="application/rss+xml"/><item><title>Working with 3D Assets</title><link>https://godotrecipes.com/godot_recipes/4.x/3d/assets/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/3d/assets/index.html</guid><description>Â Working with 3D Assets Detailed recipes for importing and working with 3D assets including models, animations, and materials.
For these examples, we&amp;rsquo;ll be using the following 3d assets from Kay Lousberg:
Adventurers Character Pack Dungeon Asset Pack In this section: Importing Assets Character Animation Character Controller</description></item><item><title>Basic FPS Character</title><link>https://godotrecipes.com/godot_recipes/4.x/3d/basic_fps/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/3d/basic_fps/index.html</guid><description>Problem You need to make a first-person shooter (FPS) character.
Solution Start with a CharacterBody3D node, and add a CollisionShape3D to it. The CapsuleShape3D collision shape is the most common choice. Depending on your world setup, you may want to add additional shapes here, but for the purposes of this example, we&amp;rsquo;ll stick to the basics.
We&amp;rsquo;ll leave all the sizing at the default values, meaning the capsule will be 2 meters high.</description></item><item><title>Camera Gimbal</title><link>https://godotrecipes.com/godot_recipes/4.x/3d/camera_gimbal/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/3d/camera_gimbal/index.html</guid><description>Problem You need a camera controller, using mouse or keyboard, that remains level while rotating and following a target.
Solution Try this: take a Camera3D node and rotate it a small amount around X (the red ring on the gizmo), then a small amount around Z (the blue ring). Now reverse the X rotation and click the &amp;ldquo;Preview&amp;rdquo; button. Observe how the camera is now tilted.
The solution to this problem is to place the camera on a gimbal - a device designed to keep an object level during movement.</description></item><item><title>Interpolated Camera</title><link>https://godotrecipes.com/godot_recipes/4.x/3d/interpolated_camera/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/3d/interpolated_camera/index.html</guid><description>Problem You need a 3D camera that smoothly follows a target (interpolates).
Solution Info Godot&amp;rsquo;s built-in InterpolatedCamera node is deprecated and will be removed in the release of Godot 4.0.
Attach the script below to a Camera3D node in your scene. The three export properties let you choose:
lerp_speed - the camera&amp;rsquo;s movement speed. Lower values result in a &amp;ldquo;lazier&amp;rdquo; camera. target - choose the camera&amp;rsquo;s target node. offset - position of the camera relative to the target.</description></item><item><title>Shooting with Raycasts</title><link>https://godotrecipes.com/godot_recipes/4.x/3d/shooting_raycasts/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/3d/shooting_raycasts/index.html</guid><description>Problem You need to implement shooting in an FPS, but moving individual projectiles is impractical.
Solution Game physics engines often break down when trying to handle very fast-moving objects. The solution is to cast a ray from the shooter&amp;rsquo;s location and detect the first thing that would be hit.
There are two ways to approach raycasting in Godot: the RayCast3D node, or directly casting a ray in space using the physics engine.</description></item><item><title>CharacterBody3D: Movement</title><link>https://godotrecipes.com/godot_recipes/4.x/3d/characterbody3d_examples/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/3d/characterbody3d_examples/index.html</guid><description>Problem You need a player-controlled 3D character body.
Solution For this recipe, we&amp;rsquo;ll be using this adorable tank model:
You can grab this model on Itch.io: https://gtibo.itch.io/mini-tank or use any other model you&amp;rsquo;d like. We won&amp;rsquo;t be doing anything that&amp;rsquo;s tank-specific here.
In the case of this asset, the download includes an OBJ file, and we&amp;rsquo;ll find it more convenient if we import it as a scene:
We can add the model to the scene, but we&amp;rsquo;ll need a couple of additional nodes:</description></item><item><title>3D Unit Healthbars</title><link>https://godotrecipes.com/godot_recipes/4.x/3d/healthbars/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/3d/healthbars/index.html</guid><description>Problem You want a floating &amp;ldquo;healthbar&amp;rdquo; for your 3D game objects (mobs, characters, etc.).
Solution For this solution, we&amp;rsquo;re going to re-use a 2D healthbar based on a TextureProgressBar node. It&amp;rsquo;s already set up with textures and code for updating the value and color. If you already have something similar, feel free to use it here. In the example, we&amp;rsquo;ll name this scene &amp;ldquo;Healthbar2D&amp;rdquo;.
If you need some assets, here are the three images used in the bar:</description></item><item><title>Rolling Cube</title><link>https://godotrecipes.com/godot_recipes/4.x/3d/rolling_cube/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/3d/rolling_cube/index.html</guid><description>Problem You want to make a rolling cube in 3D.
Solution Rolling a cube is trickier than it seems. You can&amp;rsquo;t just rotate the cube around its center:
Instead, the cube needs to be rotated around its bottom edge.
Here&amp;rsquo;s the tricky part: which bottom edge? It depends on which direction the cube is rolling.
In preparing this recipe, I experimented with a few different solutions to this problem:
Pure math - calculating and applying rotation transforms AnimationPlayer - using animations to key the rotations and offsets Helper nodes - using Spatial(s) as rotation helpers They all worked fine, but I found the last option the most flexible and easiest to adapt, so that&amp;rsquo;s what we&amp;rsquo;ll do here.</description></item><item><title>Arcade-style Spaceship</title><link>https://godotrecipes.com/godot_recipes/4.x/3d/spaceship/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/3d/spaceship/index.html</guid><description>Problem You want to make a 3D spaceship that flies in an arcade/cinematic way. You&amp;rsquo;re not looking for realistic physics, but more of a dog-fighting, &amp;ldquo;Star Wars&amp;rdquo;-style of spaceflight.
Solution To accomplish this, we&amp;rsquo;ll use a CharacterBody3D for the ship. The three axis inputs (pitch, roll, and yaw) will rotate the body&amp;rsquo;s basis around the corresponding axis. The direction of motion will always point forward.
Note You can do this with RigidBody3D and get the same results.</description></item><item><title>Arcade-style Airplane</title><link>https://godotrecipes.com/godot_recipes/4.x/3d/simple_airplane/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/3d/simple_airplane/index.html</guid><description>Problem You want to make an airplane controller in 3D, but don&amp;rsquo;t need a fully accurate flight-simulator.
Solution In this recipe, we&amp;rsquo;re going to make a simplified airplane controller. By &amp;ldquo;simplified&amp;rdquo; we mean stripping things down to the basics. We&amp;rsquo;re looking for the &amp;ldquo;feel&amp;rdquo; of flying a plane - one that you can just jump in and start flying effortlessly, with a minimal control scheme.
Note This recipe is not an accurate flight simulator.</description></item><item><title>Arcade-style Car</title><link>https://godotrecipes.com/godot_recipes/4.x/3d/3d_sphere_car/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/3d/3d_sphere_car/index.html</guid><description>Problem You want to make an arcade-style car game, so you&amp;rsquo;re looking for simplicity over realistic physics. In this recipe, you&amp;rsquo;ll learn how to make a fun, driveable car using a rolling sphere.
Solution There are a lot of ways to make a driving game. Different games need different levels of realism. If you&amp;rsquo;re trying to make a light, arcade-style car, you don&amp;rsquo;t need all of the features that Godot&amp;rsquo;s VehicleBody3D node provides, such as supension, independently modeled wheels, etc.</description></item><item><title>Click to move</title><link>https://godotrecipes.com/godot_recipes/4.x/3d/click_to_move/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/3d/click_to_move/index.html</guid><description>Problem You want to move a 3D object to a clicked position.
Solution We&amp;rsquo;ll start with a flat plane for our world. Our actor will move on this plane.
The actor for this demo is a triangular prism mesh:
Here is the code for the movement. If given a target, the object will turn and move toward it.
extends CharacterBody3D @export var speed = 5 @export var gravity = -5 var target = Vector3.</description></item><item><title>Smooth rotation</title><link>https://godotrecipes.com/godot_recipes/4.x/3d/rotate_interpolate/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/3d/rotate_interpolate/index.html</guid><description>Problem You want to smoothly rotate a 3D object to point in a new direction.
Solution When you first encounter this problem, you may find yourself thinking in terms of Euler angles - the three values representing the angles to the x/y/z axes. While Godot will allow you to see the object&amp;rsquo;s Euler angles in the rotation property, it is not recommended to use them to work in 3D. There are a number of reasons why this the case, such as a problem called &amp;ldquo;gimbal lock&amp;rdquo;, where you lose one degree of freedom when one of your rotations reaches 90 degrees.</description></item><item><title>CharacterBody3D: Align with Surface</title><link>https://godotrecipes.com/godot_recipes/4.x/3d/3d_align_surface/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://godotrecipes.com/godot_recipes/4.x/3d/3d_align_surface/index.html</guid><description>Problem You need your character body to align with the surface or terrain.
Solution This recipe builds on the basic CharacterBody3D controller described in the CharacterBody3D: Movement recipe, so read that one first.
First, we&amp;rsquo;ve added some terrain to the scene. You can download the terrain from here: https://fertile-soil-productions.itch.io/modular-terrain-pack. This is low-poly terrain, but you can use or make any terrain you like for this technique.
As you can see, the movement still works with the terrain, but the tank seems to &amp;ldquo;float&amp;rdquo; above the slopes because it doesn&amp;rsquo;t change its orientation.</description></item></channel></rss>